[0.000000] (-) TimerEvent: {}
[0.001246] (arduinobot_cpp_examples) JobQueued: {'identifier': 'arduinobot_cpp_examples', 'dependencies': OrderedDict()}
[0.002063] (arduinobot_cpp_examples) JobStarted: {'identifier': 'arduinobot_cpp_examples'}
[0.104454] (-) TimerEvent: {}
[0.255222] (-) TimerEvent: {}
[0.366273] (-) TimerEvent: {}
[0.398575] (arduinobot_cpp_examples) JobProgress: {'identifier': 'arduinobot_cpp_examples', 'progress': 'cmake'}
[0.419372] (arduinobot_cpp_examples) JobProgress: {'identifier': 'arduinobot_cpp_examples', 'progress': 'build'}
[0.434814] (arduinobot_cpp_examples) Command: {'cmd': ['/usr/bin/cmake', '--build', '/home/aldo/arduinobot_ws/build/arduinobot_cpp_examples', '--', '-j4', '-l4'], 'cwd': '/home/aldo/arduinobot_ws/build/arduinobot_cpp_examples', 'env': OrderedDict({'LESSOPEN': '| /usr/bin/lesspipe %s', 'USER': 'aldo', 'XDG_SESSION_TYPE': 'wayland', 'SHLVL': '1', 'LD_LIBRARY_PATH': '/opt/ros/jazzy/opt/rviz_ogre_vendor/lib:/opt/ros/jazzy/lib/x86_64-linux-gnu:/opt/ros/jazzy/opt/gz_math_vendor/lib:/opt/ros/jazzy/opt/gz_utils_vendor/lib:/opt/ros/jazzy/opt/gz_cmake_vendor/lib:/opt/ros/jazzy/lib', 'HOME': '/home/aldo', 'OLDPWD': '/home/aldo', 'DESKTOP_SESSION': 'ubuntu', 'ROS_PYTHON_VERSION': '3', 'GNOME_SHELL_SESSION_MODE': 'ubuntu', 'GTK_MODULES': 'gail:atk-bridge', 'SYSTEMD_EXEC_PID': '3642', 'GSM_SKIP_SSH_AGENT_WORKAROUND': 'true', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', 'COLORTERM': 'truecolor', 'GNOME_KEYRING_CONTROL': '/run/user/1000/keyring', 'DEBUGINFOD_URLS': 'https://debuginfod.ubuntu.com', 'IM_CONFIG_PHASE': '1', 'WAYLAND_DISPLAY': 'wayland-0', 'ROS_DISTRO': 'jazzy', 'LOGNAME': 'aldo', '_': '/usr/bin/colcon', 'ROS_VERSION': '2', 'MEMORY_PRESSURE_WATCH': '/sys/fs/cgroup/user.slice/user-1000.slice/user@1000.service/session.slice/org.gnome.SettingsDaemon.MediaKeys.service/memory.pressure', 'XDG_SESSION_CLASS': 'user', 'USERNAME': 'aldo', 'TERM': 'xterm-256color', 'GNOME_DESKTOP_SESSION_ID': 'this-is-deprecated', 'PATH': '/opt/ros/jazzy/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin', 'SESSION_MANAGER': 'local/aldo-VirtualBox:@/tmp/.ICE-unix/3469,unix/aldo-VirtualBox:/tmp/.ICE-unix/3469', 'XDG_MENU_PREFIX': 'gnome-', 'GNOME_TERMINAL_SCREEN': '/org/gnome/Terminal/screen/be38d247_b5bd_41b4_a730_6c559610816b', 'GNOME_SETUP_DISPLAY': ':1', 'XDG_RUNTIME_DIR': '/run/user/1000', 'DISPLAY': ':0', 'LANG': 'en_US.UTF-8', 'XDG_CURRENT_DESKTOP': 'ubuntu:GNOME', 'XMODIFIERS': '@im=ibus', 'XDG_SESSION_DESKTOP': 'ubuntu', 'XAUTHORITY': '/run/user/1000/.mutter-Xwaylandauth.J4DSD3', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=00:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.avif=01;35:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:*~=00;90:*#=00;90:*.bak=00;90:*.crdownload=00;90:*.dpkg-dist=00;90:*.dpkg-new=00;90:*.dpkg-old=00;90:*.dpkg-tmp=00;90:*.old=00;90:*.orig=00;90:*.part=00;90:*.rej=00;90:*.rpmnew=00;90:*.rpmorig=00;90:*.rpmsave=00;90:*.swp=00;90:*.tmp=00;90:*.ucf-dist=00;90:*.ucf-new=00;90:*.ucf-old=00;90:', 'GNOME_TERMINAL_SERVICE': ':1.144', 'SSH_AUTH_SOCK': '/run/user/1000/keyring/ssh', 'AMENT_PREFIX_PATH': '/opt/ros/jazzy', 'SHELL': '/bin/bash', 'QT_ACCESSIBILITY': '1', 'GDMSESSION': 'ubuntu', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'ROS_AUTOMATIC_DISCOVERY_RANGE': 'SUBNET', 'QT_IM_MODULE': 'ibus', 'PWD': '/home/aldo/arduinobot_ws/build/arduinobot_cpp_examples', 'LC_ALL': 'en_US.UTF-8', 'XDG_CONFIG_DIRS': '/etc/xdg/xdg-ubuntu:/etc/xdg', 'XDG_DATA_DIRS': '/usr/share/ubuntu:/usr/share/gnome:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop', 'PYTHONPATH': '/opt/ros/jazzy/lib/python3.12/site-packages', 'COLCON': '1', 'MEMORY_PRESSURE_WRITE': 'c29tZSAyMDAwMDAgMjAwMDAwMAA=', 'VTE_VERSION': '7600', 'CMAKE_PREFIX_PATH': '/opt/ros/jazzy/opt/gz_math_vendor:/opt/ros/jazzy/opt/gz_utils_vendor:/opt/ros/jazzy/opt/gz_cmake_vendor:/opt/ros/jazzy'}), 'shell': False}
[0.484854] (-) TimerEvent: {}
[0.599484] (-) TimerEvent: {}
[0.707067] (-) TimerEvent: {}
[0.812613] (-) TimerEvent: {}
[0.913316] (-) TimerEvent: {}
[1.018301] (-) TimerEvent: {}
[1.129483] (-) TimerEvent: {}
[1.235177] (-) TimerEvent: {}
[1.358793] (-) TimerEvent: {}
[1.490147] (-) TimerEvent: {}
[1.597417] (-) TimerEvent: {}
[1.722332] (-) TimerEvent: {}
[1.724797] (arduinobot_cpp_examples) StdoutLine: {'line': b'-- Found ament_cmake: 2.5.4 (/opt/ros/jazzy/share/ament_cmake/cmake)\n'}
[1.839447] (-) TimerEvent: {}
[1.983126] (-) TimerEvent: {}
[2.084351] (-) TimerEvent: {}
[2.190217] (-) TimerEvent: {}
[2.299586] (-) TimerEvent: {}
[2.411298] (-) TimerEvent: {}
[2.520033] (-) TimerEvent: {}
[2.621678] (-) TimerEvent: {}
[2.731647] (-) TimerEvent: {}
[2.867895] (-) TimerEvent: {}
[2.974417] (-) TimerEvent: {}
[3.083266] (-) TimerEvent: {}
[3.214936] (-) TimerEvent: {}
[3.318829] (-) TimerEvent: {}
[3.425761] (-) TimerEvent: {}
[3.533937] (-) TimerEvent: {}
[3.638913] (-) TimerEvent: {}
[3.751108] (-) TimerEvent: {}
[3.849887] (arduinobot_cpp_examples) StdoutLine: {'line': b'-- Found rclcpp: 28.1.12 (/opt/ros/jazzy/share/rclcpp/cmake)\n'}
[3.851343] (-) TimerEvent: {}
[3.969648] (-) TimerEvent: {}
[4.091034] (-) TimerEvent: {}
[4.230548] (-) TimerEvent: {}
[4.333889] (-) TimerEvent: {}
[4.454632] (-) TimerEvent: {}
[4.460964] (arduinobot_cpp_examples) StdoutLine: {'line': b'-- Found rosidl_generator_c: 4.6.6 (/opt/ros/jazzy/share/rosidl_generator_c/cmake)\n'}
[4.538984] (arduinobot_cpp_examples) StdoutLine: {'line': b'-- Found rosidl_generator_cpp: 4.6.6 (/opt/ros/jazzy/share/rosidl_generator_cpp/cmake)\n'}
[4.555405] (-) TimerEvent: {}
[4.669342] (-) TimerEvent: {}
[4.788923] (-) TimerEvent: {}
[4.875818] (arduinobot_cpp_examples) StdoutLine: {'line': b'-- Using all available rosidl_typesupport_c: rosidl_typesupport_fastrtps_c;rosidl_typesupport_introspection_c\n'}
[4.896665] (-) TimerEvent: {}
[5.000535] (-) TimerEvent: {}
[5.107601] (arduinobot_cpp_examples) StdoutLine: {'line': b'-- Using all available rosidl_typesupport_cpp: rosidl_typesupport_fastrtps_cpp;rosidl_typesupport_introspection_cpp\n'}
[5.107867] (-) TimerEvent: {}
[5.208670] (-) TimerEvent: {}
[5.318277] (-) TimerEvent: {}
[5.426130] (-) TimerEvent: {}
[5.535258] (-) TimerEvent: {}
[5.639123] (-) TimerEvent: {}
[5.742155] (-) TimerEvent: {}
[5.746261] (arduinobot_cpp_examples) StdoutLine: {'line': b'-- Found rmw_implementation_cmake: 7.3.2 (/opt/ros/jazzy/share/rmw_implementation_cmake/cmake)\n'}
[5.778557] (arduinobot_cpp_examples) StdoutLine: {'line': b'-- Found rmw_fastrtps_cpp: 8.4.3 (/opt/ros/jazzy/share/rmw_fastrtps_cpp/cmake)\n'}
[5.843149] (-) TimerEvent: {}
[5.958111] (-) TimerEvent: {}
[6.045272] (arduinobot_cpp_examples) StdoutLine: {'line': b"-- Using RMW implementation 'rmw_fastrtps_cpp' as default\n"}
[6.065366] (-) TimerEvent: {}
[6.167381] (-) TimerEvent: {}
[6.273780] (-) TimerEvent: {}
[6.381984] (-) TimerEvent: {}
[6.486048] (-) TimerEvent: {}
[6.589141] (-) TimerEvent: {}
[6.659969] (arduinobot_cpp_examples) StdoutLine: {'line': b'-- Found std_msgs: 5.3.6 (/opt/ros/jazzy/share/std_msgs/cmake)\n'}
[6.693237] (-) TimerEvent: {}
[6.726171] (arduinobot_cpp_examples) StdoutLine: {'line': b'-- Found ament_lint_auto: 0.17.3 (/opt/ros/jazzy/share/ament_lint_auto/cmake)\n'}
[6.815604] (-) TimerEvent: {}
[6.915979] (-) TimerEvent: {}
[6.960611] (arduinobot_cpp_examples) StdoutLine: {'line': b"-- Added test 'cppcheck' to perform static code analysis on C / C++ code\n"}
[6.960844] (arduinobot_cpp_examples) StdoutLine: {'line': b'-- Configured cppcheck include dirs: \n'}
[6.960939] (arduinobot_cpp_examples) StdoutLine: {'line': b'-- Configured cppcheck exclude dirs and/or files: \n'}
[6.982853] (arduinobot_cpp_examples) StdoutLine: {'line': b"-- Added test 'lint_cmake' to check CMake code style\n"}
[6.988120] (arduinobot_cpp_examples) StdoutLine: {'line': b"-- Added test 'uncrustify' to check C / C++ code style\n"}
[6.989056] (arduinobot_cpp_examples) StdoutLine: {'line': b'-- Configured uncrustify additional arguments: \n'}
[6.995171] (arduinobot_cpp_examples) StdoutLine: {'line': b"-- Added test 'xmllint' to check XML markup files\n"}
[7.021826] (-) TimerEvent: {}
[7.037373] (arduinobot_cpp_examples) StdoutLine: {'line': b'-- Configuring done (5.6s)\n'}
[7.124097] (-) TimerEvent: {}
[7.225094] (-) TimerEvent: {}
[7.310263] (arduinobot_cpp_examples) StdoutLine: {'line': b'-- Generating done (0.2s)\n'}
[7.326045] (-) TimerEvent: {}
[7.332523] (arduinobot_cpp_examples) StdoutLine: {'line': b'-- Build files have been written to: /home/aldo/arduinobot_ws/build/arduinobot_cpp_examples\n'}
[7.426219] (-) TimerEvent: {}
[7.510509] (arduinobot_cpp_examples) StdoutLine: {'line': b'[ 25%] \x1b[32mBuilding CXX object CMakeFiles/simple_subscriber.dir/src/simple_subscriber.cpp.o\x1b[0m\n'}
[7.526968] (-) TimerEvent: {}
[7.640566] (-) TimerEvent: {}
[7.757963] (-) TimerEvent: {}
[7.889049] (-) TimerEvent: {}
[8.014144] (-) TimerEvent: {}
[8.117663] (-) TimerEvent: {}
[8.218676] (-) TimerEvent: {}
[8.335087] (arduinobot_cpp_examples) StdoutLine: {'line': b'[ 50%] \x1b[32mBuilding CXX object CMakeFiles/simple_publisher.dir/src/simple_publisher.cpp.o\x1b[0m\n'}
[8.335460] (-) TimerEvent: {}
[8.436890] (-) TimerEvent: {}
[8.537442] (-) TimerEvent: {}
[8.638283] (-) TimerEvent: {}
[8.738922] (-) TimerEvent: {}
[8.841262] (-) TimerEvent: {}
[8.960198] (-) TimerEvent: {}
[9.069150] (-) TimerEvent: {}
[9.175433] (-) TimerEvent: {}
[9.289659] (-) TimerEvent: {}
[9.391229] (-) TimerEvent: {}
[9.503249] (-) TimerEvent: {}
[9.616601] (-) TimerEvent: {}
[9.723474] (-) TimerEvent: {}
[9.831264] (-) TimerEvent: {}
[9.949976] (-) TimerEvent: {}
[10.050893] (-) TimerEvent: {}
[10.156550] (-) TimerEvent: {}
[10.261931] (-) TimerEvent: {}
[10.369207] (-) TimerEvent: {}
[10.473204] (-) TimerEvent: {}
[10.577056] (-) TimerEvent: {}
[10.685548] (-) TimerEvent: {}
[10.793541] (-) TimerEvent: {}
[10.909321] (-) TimerEvent: {}
[11.011142] (-) TimerEvent: {}
[11.134836] (-) TimerEvent: {}
[11.270965] (-) TimerEvent: {}
[11.372788] (-) TimerEvent: {}
[11.473829] (-) TimerEvent: {}
[11.580059] (-) TimerEvent: {}
[11.680749] (-) TimerEvent: {}
[11.792595] (-) TimerEvent: {}
[11.938952] (-) TimerEvent: {}
[12.046081] (-) TimerEvent: {}
[12.146990] (-) TimerEvent: {}
[12.257433] (-) TimerEvent: {}
[12.373517] (-) TimerEvent: {}
[12.488981] (-) TimerEvent: {}
[12.593506] (-) TimerEvent: {}
[12.697511] (-) TimerEvent: {}
[12.799045] (-) TimerEvent: {}
[12.925002] (-) TimerEvent: {}
[13.062025] (-) TimerEvent: {}
[13.164172] (-) TimerEvent: {}
[13.266561] (-) TimerEvent: {}
[13.368512] (-) TimerEvent: {}
[13.476259] (-) TimerEvent: {}
[13.586163] (-) TimerEvent: {}
[13.703722] (-) TimerEvent: {}
[13.806131] (-) TimerEvent: {}
[13.918581] (-) TimerEvent: {}
[14.063482] (-) TimerEvent: {}
[14.173614] (-) TimerEvent: {}
[14.285146] (-) TimerEvent: {}
[14.396542] (-) TimerEvent: {}
[14.511862] (-) TimerEvent: {}
[14.619276] (-) TimerEvent: {}
[14.763209] (-) TimerEvent: {}
[14.871894] (-) TimerEvent: {}
[14.980524] (-) TimerEvent: {}
[15.085931] (-) TimerEvent: {}
[15.195003] (-) TimerEvent: {}
[15.302938] (-) TimerEvent: {}
[15.411405] (-) TimerEvent: {}
[15.521123] (-) TimerEvent: {}
[15.623830] (-) TimerEvent: {}
[15.738432] (-) TimerEvent: {}
[15.841067] (-) TimerEvent: {}
[15.943438] (-) TimerEvent: {}
[16.050120] (-) TimerEvent: {}
[16.171880] (-) TimerEvent: {}
[16.298214] (-) TimerEvent: {}
[16.562986] (-) TimerEvent: {}
[16.677380] (-) TimerEvent: {}
[16.808335] (-) TimerEvent: {}
[17.013847] (-) TimerEvent: {}
[17.119182] (-) TimerEvent: {}
[17.272032] (-) TimerEvent: {}
[17.555040] (-) TimerEvent: {}
[17.874062] (-) TimerEvent: {}
[18.115307] (-) TimerEvent: {}
[18.225661] (-) TimerEvent: {}
[18.330052] (-) TimerEvent: {}
[18.849974] (-) TimerEvent: {}
[19.107204] (-) TimerEvent: {}
[19.352235] (-) TimerEvent: {}
[19.459819] (-) TimerEvent: {}
[19.563802] (-) TimerEvent: {}
[19.667065] (-) TimerEvent: {}
[19.829564] (-) TimerEvent: {}
[19.930929] (-) TimerEvent: {}
[20.194169] (-) TimerEvent: {}
[20.296621] (-) TimerEvent: {}
[20.413612] (-) TimerEvent: {}
[20.543266] (-) TimerEvent: {}
[20.717884] (-) TimerEvent: {}
[21.051582] (-) TimerEvent: {}
[21.212986] (-) TimerEvent: {}
[21.325416] (-) TimerEvent: {}
[21.440876] (-) TimerEvent: {}
[21.701322] (-) TimerEvent: {}
[21.810876] (-) TimerEvent: {}
[21.950802] (-) TimerEvent: {}
[22.059635] (-) TimerEvent: {}
[22.208082] (-) TimerEvent: {}
[22.308699] (-) TimerEvent: {}
[22.423888] (-) TimerEvent: {}
[22.524582] (-) TimerEvent: {}
[22.625576] (-) TimerEvent: {}
[22.729413] (-) TimerEvent: {}
[22.932586] (-) TimerEvent: {}
[23.040132] (-) TimerEvent: {}
[23.160905] (-) TimerEvent: {}
[23.265134] (-) TimerEvent: {}
[23.374064] (-) TimerEvent: {}
[23.784068] (-) TimerEvent: {}
[23.914963] (-) TimerEvent: {}
[24.074846] (-) TimerEvent: {}
[24.184526] (-) TimerEvent: {}
[24.327909] (-) TimerEvent: {}
[24.590940] (-) TimerEvent: {}
[24.719786] (-) TimerEvent: {}
[24.786175] (arduinobot_cpp_examples) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/copy_all_parameter_values.hpp:27\x1b[m\x1b[K,\n'}
[24.799057] (arduinobot_cpp_examples) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/rclcpp.hpp:171\x1b[m\x1b[K,\n'}
[24.799803] (arduinobot_cpp_examples) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/aldo/arduinobot_ws/src/arduinobot_cpp_examples/src/simple_subscriber.cpp:1\x1b[m\x1b[K:\n'}
[24.800968] (arduinobot_cpp_examples) StderrLine: {'line': b'\x1b[01m\x1b[K/home/aldo/arduinobot_ws/src/arduinobot_cpp_examples/src/simple_subscriber.cpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid SimpleSubscriber::\x1b[01;32m\x1b[Ktopic_callback\x1b[m\x1b[K(const std_msgs::msg::String_<std::allocator<void> >::SharedPtr&) const\x1b[m\x1b[K\xe2\x80\x99:\n'}
[24.803009] (arduinobot_cpp_examples) StderrLine: {'line': b'\x1b[01m\x1b[K/home/aldo/arduinobot_ws/src/arduinobot_cpp_examples/src/simple_subscriber.cpp:16:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kconst std_msgs::msg::String_<std::allocator<void> >::SharedPtr\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kconst class std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99} has no member named \xe2\x80\x98\x1b[01m\x1b[Kdata\x1b[m\x1b[K\xe2\x80\x99\n'}
[24.804876] (arduinobot_cpp_examples) StderrLine: {'line': b'   16 |         RCLCPP_INFO_STREAM(get_logger(), "Received message: " << msg.\x1b[01;31m\x1b[Kdata\x1b[m\x1b[K.c_str());\n'}
[24.805530] (arduinobot_cpp_examples) StderrLine: {'line': b'      |                                                                      \x1b[01;31m\x1b[K^~~~\x1b[m\x1b[K\n'}
[24.833132] (-) TimerEvent: {}
[24.971016] (-) TimerEvent: {}
[25.090759] (-) TimerEvent: {}
[25.223719] (-) TimerEvent: {}
[25.328838] (-) TimerEvent: {}
[25.437416] (-) TimerEvent: {}
[25.630809] (-) TimerEvent: {}
[25.766340] (-) TimerEvent: {}
[25.948411] (-) TimerEvent: {}
[26.078096] (-) TimerEvent: {}
[26.241441] (-) TimerEvent: {}
[26.345827] (-) TimerEvent: {}
[26.448068] (-) TimerEvent: {}
[26.554427] (-) TimerEvent: {}
[26.676986] (-) TimerEvent: {}
[26.791224] (-) TimerEvent: {}
[26.934670] (-) TimerEvent: {}
[27.041197] (-) TimerEvent: {}
[27.162054] (-) TimerEvent: {}
[27.266314] (-) TimerEvent: {}
[27.849706] (-) TimerEvent: {}
[27.965304] (-) TimerEvent: {}
[28.072743] (-) TimerEvent: {}
[28.181003] (-) TimerEvent: {}
[28.458484] (-) TimerEvent: {}
[28.575376] (-) TimerEvent: {}
[28.724780] (-) TimerEvent: {}
[28.829718] (-) TimerEvent: {}
[29.049051] (-) TimerEvent: {}
[29.170411] (-) TimerEvent: {}
[29.191322] (arduinobot_cpp_examples) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/subscription_base.hpp:32\x1b[m\x1b[K,\n'}
[29.240044] (arduinobot_cpp_examples) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/callback_group.hpp:29\x1b[m\x1b[K,\n'}
[29.240218] (arduinobot_cpp_examples) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[29.240318] (arduinobot_cpp_examples) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[29.240408] (arduinobot_cpp_examples) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[29.283918] (-) TimerEvent: {}
[29.284150] (arduinobot_cpp_examples) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/executor_options.hpp:22\x1b[m\x1b[K,\n'}
[29.284436] (arduinobot_cpp_examples) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/executor.hpp:38\x1b[m\x1b[K,\n'}
[29.284603] (arduinobot_cpp_examples) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[29.284879] (arduinobot_cpp_examples) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[29.337194] (arduinobot_cpp_examples) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/rclcpp.hpp:172\x1b[m\x1b[K:\n'}
[29.337560] (arduinobot_cpp_examples) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::\x1b[01;32m\x1b[Kset\x1b[m\x1b[K(CallbackT) \x1b[35m\x1b[K[with CallbackT = std::_Bind<void (SimpleSubscriber::*(SimpleSubscriber*, std::_Placeholder<1>))(const std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >&) const>; MessageT = std_msgs::msg::String_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99:\n'}
[29.342557] (arduinobot_cpp_examples) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/subscription_factory.hpp:93:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::\x1b[01;32m\x1b[Kcreate_subscription_factory\x1b[m\x1b[K(CallbackT&&, const SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<topic_statistics::SubscriptionTopicStatistics>) \x1b[35m\x1b[K[with MessageT = std_msgs::msg::String_<std::allocator<void> >; CallbackT = std::_Bind<void (SimpleSubscriber::*(SimpleSubscriber*, std::_Placeholder<1>))(const std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = Subscription<std_msgs::msg::String_<std::allocator<void> > >; MessageMemoryStrategyT = message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[29.342712] (arduinobot_cpp_examples) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_subscription.hpp:121:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::\x1b[01;32m\x1b[Kcreate_subscription\x1b[m\x1b[K(NodeParametersT&, NodeTopicsT&, const std::string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) \x1b[35m\x1b[K[with MessageT = std_msgs::msg::String_<std::allocator<void> >; CallbackT = std::_Bind<void (SimpleSubscriber::*(SimpleSubscriber*, std::_Placeholder<1>))(const std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[29.347688] (arduinobot_cpp_examples) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_subscription.hpp:190:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::\x1b[01;32m\x1b[Kcreate_subscription\x1b[m\x1b[K(NodeT&, const std::string&, const QoS&, CallbackT&&, const SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) \x1b[35m\x1b[K[with MessageT = std_msgs::msg::String_<std::allocator<void> >; CallbackT = std::_Bind<void (SimpleSubscriber::*(SimpleSubscriber*, std::_Placeholder<1>))(const std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = Subscription<std_msgs::msg::String_<std::allocator<void> > >; MessageMemoryStrategyT = message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >; NodeT = Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[29.378749] (arduinobot_cpp_examples) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::\x1b[01;32m\x1b[Kcreate_subscription\x1b[m\x1b[K(const std::string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) \x1b[35m\x1b[K[with MessageT = std_msgs::msg::String_<std::allocator<void> >; CallbackT = std::_Bind<void (SimpleSubscriber::*(SimpleSubscriber*, std::_Placeholder<1>))(const std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[29.379095] (arduinobot_cpp_examples) StderrLine: {'line': b'\x1b[01m\x1b[K/home/aldo/arduinobot_ws/src/arduinobot_cpp_examples/src/simple_subscriber.cpp:11:58:\x1b[m\x1b[K   required from here\n'}
[29.379222] (arduinobot_cpp_examples) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_subscription_callback.hpp:396:23:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for \xe2\x80\x98\x1b[01m\x1b[Koperator=\x1b[m\x1b[K\xe2\x80\x99 (operand types are \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::AnySubscriptionCallbackHelper<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void>, false, false>::variant_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::function<void(const std_msgs::msg::String_<std::allocator<void> >&)>, std::function<void(const std_msgs::msg::String_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std_msgs::msg::String_<std::allocator<void> >, std::default_delete<std_msgs::msg::String_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<std_msgs::msg::String_<std::allocator<void> >, std::default_delete<std_msgs::msg::String_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >\x1b[m\x1b[K\xe2\x80\x99} and \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<std_msgs::msg::String_<std::allocator<void> >, std::_Bind<void (SimpleSubscriber::*(SimpleSubscriber*, std::_Placeholder<1>))(const std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >&) const>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >&)>\x1b[m\x1b[K\xe2\x80\x99})\n'}
[29.379377] (arduinobot_cpp_examples) StderrLine: {'line': b'  396 |     \x1b[01;31m\x1b[Kcallback_variant_ = static_cast<typename scbth::callback_type>(callback)\x1b[m\x1b[K;\n'}
[29.379473] (arduinobot_cpp_examples) StderrLine: {'line': b'      |     \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[29.379561] (arduinobot_cpp_examples) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/client.hpp:29\x1b[m\x1b[K,\n'}
[29.379648] (arduinobot_cpp_examples) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/callback_group.hpp:24\x1b[m\x1b[K:\n'}
[29.379734] (arduinobot_cpp_examples) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1494:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::\x1b[01;32m\x1b[Koperator=\x1b[m\x1b[K(_Tp&&) \x1b[35m\x1b[K[with _Types = {std::function<void(const std_msgs::msg::String_<std::allocator<void> >&)>, std::function<void(const std_msgs::msg::String_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std_msgs::msg::String_<std::allocator<void> >, std::default_delete<std_msgs::msg::String_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<std_msgs::msg::String_<std::allocator<void> >, std::default_delete<std_msgs::msg::String_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[29.379866] (arduinobot_cpp_examples) StderrLine: {'line': b' 1494 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(_Tp&& __rhs)\n'}
[29.379955] (arduinobot_cpp_examples) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[29.380042] (arduinobot_cpp_examples) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1494:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[29.380128] (arduinobot_cpp_examples) StderrLine: {'line': b'/usr/include/c++/13/variant: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class ... _Types> template<class _Tp, class> using std::variant<_Types>::__accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > \x1b[35m\x1b[K[with _Tp = std::function<void(const std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >&)>&&; <template-parameter-2-2> = void; _Types = {std::function<void(const std_msgs::msg::String_<std::allocator<void> >&)>, std::function<void(const std_msgs::msg::String_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std_msgs::msg::String_<std::allocator<void> >, std::default_delete<std_msgs::msg::String_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<std_msgs::msg::String_<std::allocator<void> >, std::default_delete<std_msgs::msg::String_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99:\n'}
[29.380264] (arduinobot_cpp_examples) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1490:14:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::function<void(const std_msgs::msg::String_<std::allocator<void> >&)>, std::function<void(const std_msgs::msg::String_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std_msgs::msg::String_<std::allocator<void> >, std::default_delete<std_msgs::msg::String_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<std_msgs::msg::String_<std::allocator<void> >, std::default_delete<std_msgs::msg::String_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::function<void(const std_msgs::msg::String_<std::allocator<void> >&)>, std::function<void(const std_msgs::msg::String_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std_msgs::msg::String_<std::allocator<void> >, std::default_delete<std_msgs::msg::String_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<std_msgs::msg::String_<std::allocator<void> >, std::default_delete<std_msgs::msg::String_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::function<void(const std_msgs::msg::String_<std::allocator<void> >&)>, std::function<void(const std_msgs::msg::String_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std_msgs::msg::String_<std::allocator<void> >, std::default_delete<std_msgs::msg::String_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<std_msgs::msg::String_<std::allocator<void> >, std::default_delete<std_msgs::msg::String_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::function<void(const std_msgs::msg::String_<std::allocator<void> >&)>, std::function<void(const std_msgs::msg::String_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std_msgs::msg::String_<std::allocator<void> >, std::default_delete<std_msgs::msg::String_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<std_msgs::msg::String_<std::allocator<void> >, std::default_delete<std_msgs::msg::String_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&> std::variant<std::function<void(const std_msgs::msg::String_<std::allocator<void> >&)>, std::function<void(const std_msgs::msg::String_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std_msgs::msg::String_<std::allocator<void> >, std::default_delete<std_msgs::msg::String_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<std_msgs::msg::String_<std::allocator<void> >, std::default_delete<std_msgs::msg::String_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::\x1b[01;32m\x1b[Koperator=\x1b[m\x1b[K(_Tp&&) \x1b[35m\x1b[K[with _Tp = std::function<void(const std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >&)>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[29.443225] (-) TimerEvent: {}
[29.443866] (arduinobot_cpp_examples) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/any_subscription_callback.hpp:396:23:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::\x1b[01;32m\x1b[Kset\x1b[m\x1b[K(CallbackT) \x1b[35m\x1b[K[with CallbackT = std::_Bind<void (SimpleSubscriber::*(SimpleSubscriber*, std::_Placeholder<1>))(const std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >&) const>; MessageT = std_msgs::msg::String_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[29.444053] (arduinobot_cpp_examples) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/subscription_factory.hpp:93:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::\x1b[01;32m\x1b[Kcreate_subscription_factory\x1b[m\x1b[K(CallbackT&&, const SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<topic_statistics::SubscriptionTopicStatistics>) \x1b[35m\x1b[K[with MessageT = std_msgs::msg::String_<std::allocator<void> >; CallbackT = std::_Bind<void (SimpleSubscriber::*(SimpleSubscriber*, std::_Placeholder<1>))(const std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = Subscription<std_msgs::msg::String_<std::allocator<void> > >; MessageMemoryStrategyT = message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[29.448213] (arduinobot_cpp_examples) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_subscription.hpp:121:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::\x1b[01;32m\x1b[Kcreate_subscription\x1b[m\x1b[K(NodeParametersT&, NodeTopicsT&, const std::string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) \x1b[35m\x1b[K[with MessageT = std_msgs::msg::String_<std::allocator<void> >; CallbackT = std::_Bind<void (SimpleSubscriber::*(SimpleSubscriber*, std::_Placeholder<1>))(const std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[29.448353] (arduinobot_cpp_examples) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_subscription.hpp:190:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::\x1b[01;32m\x1b[Kcreate_subscription\x1b[m\x1b[K(NodeT&, const std::string&, const QoS&, CallbackT&&, const SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) \x1b[35m\x1b[K[with MessageT = std_msgs::msg::String_<std::allocator<void> >; CallbackT = std::_Bind<void (SimpleSubscriber::*(SimpleSubscriber*, std::_Placeholder<1>))(const std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = Subscription<std_msgs::msg::String_<std::allocator<void> > >; MessageMemoryStrategyT = message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >; NodeT = Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[29.477343] (arduinobot_cpp_examples) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::\x1b[01;32m\x1b[Kcreate_subscription\x1b[m\x1b[K(const std::string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) \x1b[35m\x1b[K[with MessageT = std_msgs::msg::String_<std::allocator<void> >; CallbackT = std::_Bind<void (SimpleSubscriber::*(SimpleSubscriber*, std::_Placeholder<1>))(const std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[29.478419] (arduinobot_cpp_examples) StderrLine: {'line': b'\x1b[01m\x1b[K/home/aldo/arduinobot_ws/src/arduinobot_cpp_examples/src/simple_subscriber.cpp:11:58:\x1b[m\x1b[K   required from here\n'}
[29.511137] (arduinobot_cpp_examples) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1407:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, void>\x1b[m\x1b[K\xe2\x80\x99\n'}
[29.511277] (arduinobot_cpp_examples) StderrLine: {'line': b' 1407 |         using \x1b[01;31m\x1b[K__accepted_type\x1b[m\x1b[K = __to_type<__accepted_index<_Tp>>;\n'}
[29.511378] (arduinobot_cpp_examples) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[29.511469] (arduinobot_cpp_examples) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::\x1b[01;32m\x1b[Kset\x1b[m\x1b[K(CallbackT) \x1b[35m\x1b[K[with CallbackT = std::_Bind<void (SimpleSubscriber::*(SimpleSubscriber*, std::_Placeholder<1>))(const std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >&) const>; MessageT = std_msgs::msg::String_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99:\n'}
[29.511584] (arduinobot_cpp_examples) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/subscription_factory.hpp:93:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::\x1b[01;32m\x1b[Kcreate_subscription_factory\x1b[m\x1b[K(CallbackT&&, const SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<topic_statistics::SubscriptionTopicStatistics>) \x1b[35m\x1b[K[with MessageT = std_msgs::msg::String_<std::allocator<void> >; CallbackT = std::_Bind<void (SimpleSubscriber::*(SimpleSubscriber*, std::_Placeholder<1>))(const std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = Subscription<std_msgs::msg::String_<std::allocator<void> > >; MessageMemoryStrategyT = message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[29.511692] (arduinobot_cpp_examples) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_subscription.hpp:121:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::\x1b[01;32m\x1b[Kcreate_subscription\x1b[m\x1b[K(NodeParametersT&, NodeTopicsT&, const std::string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) \x1b[35m\x1b[K[with MessageT = std_msgs::msg::String_<std::allocator<void> >; CallbackT = std::_Bind<void (SimpleSubscriber::*(SimpleSubscriber*, std::_Placeholder<1>))(const std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[29.511799] (arduinobot_cpp_examples) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/create_subscription.hpp:190:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::\x1b[01;32m\x1b[Kcreate_subscription\x1b[m\x1b[K(NodeT&, const std::string&, const QoS&, CallbackT&&, const SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) \x1b[35m\x1b[K[with MessageT = std_msgs::msg::String_<std::allocator<void> >; CallbackT = std::_Bind<void (SimpleSubscriber::*(SimpleSubscriber*, std::_Placeholder<1>))(const std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = Subscription<std_msgs::msg::String_<std::allocator<void> > >; MessageMemoryStrategyT = message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >; NodeT = Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[29.511903] (arduinobot_cpp_examples) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::\x1b[01;32m\x1b[Kcreate_subscription\x1b[m\x1b[K(const std::string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) \x1b[35m\x1b[K[with MessageT = std_msgs::msg::String_<std::allocator<void> >; CallbackT = std::_Bind<void (SimpleSubscriber::*(SimpleSubscriber*, std::_Placeholder<1>))(const std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[29.512010] (arduinobot_cpp_examples) StderrLine: {'line': b'\x1b[01m\x1b[K/home/aldo/arduinobot_ws/src/arduinobot_cpp_examples/src/simple_subscriber.cpp:11:58:\x1b[m\x1b[K   required from here\n'}
[29.512096] (arduinobot_cpp_examples) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1430:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::\x1b[01;32m\x1b[Koperator=\x1b[m\x1b[K(const std::variant<_Types>&) \x1b[35m\x1b[K[with _Types = {std::function<void(const std_msgs::msg::String_<std::allocator<void> >&)>, std::function<void(const std_msgs::msg::String_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std_msgs::msg::String_<std::allocator<void> >, std::default_delete<std_msgs::msg::String_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<std_msgs::msg::String_<std::allocator<void> >, std::default_delete<std_msgs::msg::String_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[29.520132] (arduinobot_cpp_examples) StderrLine: {'line': b' 1430 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const variant&) = default;\n'}
[29.520344] (arduinobot_cpp_examples) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[29.520496] (arduinobot_cpp_examples) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1430:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<std_msgs::msg::String_<std::allocator<void> >, std::_Bind<void (SimpleSubscriber::*(SimpleSubscriber*, std::_Placeholder<1>))(const std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >&) const>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >&)>\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst std::variant<std::function<void(const std_msgs::msg::String_<std::allocator<void> >&)>, std::function<void(const std_msgs::msg::String_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std_msgs::msg::String_<std::allocator<void> >, std::default_delete<std_msgs::msg::String_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<std_msgs::msg::String_<std::allocator<void> >, std::default_delete<std_msgs::msg::String_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[29.531289] (arduinobot_cpp_examples) StderrLine: {'line': b' 1430 |       variant& operator=(\x1b[01;36m\x1b[Kconst variant&\x1b[m\x1b[K) = default;\n'}
[29.531532] (arduinobot_cpp_examples) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[29.555192] (-) TimerEvent: {}
[29.555433] (arduinobot_cpp_examples) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1431:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::\x1b[01;32m\x1b[Koperator=\x1b[m\x1b[K(std::variant<_Types>&&) \x1b[35m\x1b[K[with _Types = {std::function<void(const std_msgs::msg::String_<std::allocator<void> >&)>, std::function<void(const std_msgs::msg::String_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std_msgs::msg::String_<std::allocator<void> >, std::default_delete<std_msgs::msg::String_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<std_msgs::msg::String_<std::allocator<void> >, std::default_delete<std_msgs::msg::String_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\x1b[m\x1b[K\xe2\x80\x99\n'}
[29.555642] (arduinobot_cpp_examples) StderrLine: {'line': b' 1431 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(variant&&) = default;\n'}
[29.555740] (arduinobot_cpp_examples) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[29.595580] (arduinobot_cpp_examples) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/13/variant:1431:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<std_msgs::msg::String_<std::allocator<void> >, std::_Bind<void (SimpleSubscriber::*(SimpleSubscriber*, std::_Placeholder<1>))(const std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >&) const>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >&)>\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::function<void(const std_msgs::msg::String_<std::allocator<void> >&)>, std::function<void(const std_msgs::msg::String_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std_msgs::msg::String_<std::allocator<void> >, std::default_delete<std_msgs::msg::String_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<std_msgs::msg::String_<std::allocator<void> >, std::default_delete<std_msgs::msg::String_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const std_msgs::msg::String_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[29.597834] (arduinobot_cpp_examples) StderrLine: {'line': b' 1431 |       variant& operator=(\x1b[01;36m\x1b[Kvariant&&\x1b[m\x1b[K) = default;\n'}
[29.597970] (arduinobot_cpp_examples) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[29.748146] (-) TimerEvent: {}
[29.850780] (-) TimerEvent: {}
[30.179464] (-) TimerEvent: {}
[30.282581] (-) TimerEvent: {}
[30.392329] (-) TimerEvent: {}
[30.552417] (-) TimerEvent: {}
[30.656040] (-) TimerEvent: {}
[31.041390] (-) TimerEvent: {}
[31.177488] (-) TimerEvent: {}
[31.284027] (-) TimerEvent: {}
[31.404528] (-) TimerEvent: {}
[31.732405] (-) TimerEvent: {}
[31.850824] (-) TimerEvent: {}
[31.957083] (-) TimerEvent: {}
[32.069518] (-) TimerEvent: {}
[32.191005] (-) TimerEvent: {}
[32.309509] (-) TimerEvent: {}
[32.414890] (-) TimerEvent: {}
[32.542972] (-) TimerEvent: {}
[32.741207] (-) TimerEvent: {}
[32.876107] (-) TimerEvent: {}
[33.045443] (-) TimerEvent: {}
[33.150245] (-) TimerEvent: {}
[33.299994] (-) TimerEvent: {}
[33.413902] (-) TimerEvent: {}
[33.551881] (-) TimerEvent: {}
[33.692532] (-) TimerEvent: {}
[33.818537] (-) TimerEvent: {}
[33.948354] (-) TimerEvent: {}
[34.097310] (-) TimerEvent: {}
[34.205507] (-) TimerEvent: {}
[34.380955] (-) TimerEvent: {}
[34.508823] (-) TimerEvent: {}
[35.185158] (-) TimerEvent: {}
[35.307760] (-) TimerEvent: {}
[35.456292] (-) TimerEvent: {}
[35.659088] (-) TimerEvent: {}
[35.767108] (-) TimerEvent: {}
[35.883546] (-) TimerEvent: {}
[36.029538] (-) TimerEvent: {}
[36.180827] (-) TimerEvent: {}
[36.288400] (-) TimerEvent: {}
[36.483156] (-) TimerEvent: {}
[36.607931] (-) TimerEvent: {}
[36.725177] (-) TimerEvent: {}
[36.878365] (-) TimerEvent: {}
[36.994721] (-) TimerEvent: {}
[37.109162] (-) TimerEvent: {}
[37.210995] (-) TimerEvent: {}
[37.320559] (-) TimerEvent: {}
[37.478052] (-) TimerEvent: {}
[37.598047] (-) TimerEvent: {}
[37.713831] (-) TimerEvent: {}
[37.838771] (-) TimerEvent: {}
[37.968779] (-) TimerEvent: {}
[38.082183] (-) TimerEvent: {}
[38.186893] (-) TimerEvent: {}
[38.302101] (-) TimerEvent: {}
[38.408785] (-) TimerEvent: {}
[38.515121] (-) TimerEvent: {}
[38.627139] (-) TimerEvent: {}
[38.741741] (-) TimerEvent: {}
[38.846186] (-) TimerEvent: {}
[38.991769] (-) TimerEvent: {}
[39.166962] (-) TimerEvent: {}
[39.276191] (-) TimerEvent: {}
[39.385936] (-) TimerEvent: {}
[39.524554] (-) TimerEvent: {}
[39.653694] (-) TimerEvent: {}
[39.758748] (-) TimerEvent: {}
[39.936829] (-) TimerEvent: {}
[40.093629] (-) TimerEvent: {}
[40.210113] (-) TimerEvent: {}
[40.351244] (-) TimerEvent: {}
[40.482610] (-) TimerEvent: {}
[40.611568] (-) TimerEvent: {}
[40.777978] (-) TimerEvent: {}
[40.911199] (-) TimerEvent: {}
[41.019815] (-) TimerEvent: {}
[41.128653] (-) TimerEvent: {}
[41.237723] (-) TimerEvent: {}
[41.352325] (-) TimerEvent: {}
[41.494974] (-) TimerEvent: {}
[41.602804] (-) TimerEvent: {}
[41.718620] (-) TimerEvent: {}
[41.830367] (-) TimerEvent: {}
[41.947386] (-) TimerEvent: {}
[42.084449] (-) TimerEvent: {}
[42.214778] (-) TimerEvent: {}
[42.360924] (-) TimerEvent: {}
[42.478034] (-) TimerEvent: {}
[42.583745] (-) TimerEvent: {}
[42.708215] (-) TimerEvent: {}
[42.849129] (-) TimerEvent: {}
[42.996266] (-) TimerEvent: {}
[43.147355] (-) TimerEvent: {}
[43.288035] (-) TimerEvent: {}
[43.439215] (-) TimerEvent: {}
[43.553905] (-) TimerEvent: {}
[43.750427] (-) TimerEvent: {}
[43.887911] (-) TimerEvent: {}
[44.008521] (-) TimerEvent: {}
[44.212970] (-) TimerEvent: {}
[44.346550] (-) TimerEvent: {}
[44.479068] (-) TimerEvent: {}
[44.594345] (-) TimerEvent: {}
[44.705156] (-) TimerEvent: {}
[44.933937] (-) TimerEvent: {}
[45.054484] (-) TimerEvent: {}
[45.156208] (-) TimerEvent: {}
[45.262346] (-) TimerEvent: {}
[45.370372] (-) TimerEvent: {}
[45.555630] (-) TimerEvent: {}
[45.710382] (-) TimerEvent: {}
[45.860962] (-) TimerEvent: {}
[45.999083] (-) TimerEvent: {}
[46.134612] (-) TimerEvent: {}
[46.281970] (-) TimerEvent: {}
[46.393904] (-) TimerEvent: {}
[46.638297] (-) TimerEvent: {}
[46.830257] (-) TimerEvent: {}
[47.198101] (-) TimerEvent: {}
[47.315709] (-) TimerEvent: {}
[47.447383] (-) TimerEvent: {}
[47.668279] (-) TimerEvent: {}
[47.794793] (-) TimerEvent: {}
[47.921269] (-) TimerEvent: {}
[48.030622] (-) TimerEvent: {}
[48.173156] (-) TimerEvent: {}
[48.299125] (-) TimerEvent: {}
[48.410945] (-) TimerEvent: {}
[48.549478] (-) TimerEvent: {}
[48.715114] (-) TimerEvent: {}
[48.826454] (-) TimerEvent: {}
[48.937439] (-) TimerEvent: {}
[49.072165] (-) TimerEvent: {}
[49.192987] (-) TimerEvent: {}
[49.307041] (-) TimerEvent: {}
[49.441408] (-) TimerEvent: {}
[49.542367] (-) TimerEvent: {}
[49.671810] (-) TimerEvent: {}
[49.819051] (-) TimerEvent: {}
[49.964686] (-) TimerEvent: {}
[50.104896] (-) TimerEvent: {}
[50.212824] (-) TimerEvent: {}
[50.425225] (-) TimerEvent: {}
[50.548105] (-) TimerEvent: {}
[50.668182] (-) TimerEvent: {}
[50.786897] (-) TimerEvent: {}
[50.889858] (-) TimerEvent: {}
[50.997001] (-) TimerEvent: {}
[51.103067] (-) TimerEvent: {}
[51.248566] (-) TimerEvent: {}
[51.352539] (-) TimerEvent: {}
[51.469526] (-) TimerEvent: {}
[51.603007] (-) TimerEvent: {}
[51.749700] (-) TimerEvent: {}
[51.856238] (arduinobot_cpp_examples) StderrLine: {'line': b'gmake[2]: *** [CMakeFiles/simple_subscriber.dir/build.make:76: CMakeFiles/simple_subscriber.dir/src/simple_subscriber.cpp.o] Error 1\n'}
[51.857749] (-) TimerEvent: {}
[51.944001] (arduinobot_cpp_examples) StderrLine: {'line': b'gmake[1]: *** [CMakeFiles/Makefile2:165: CMakeFiles/simple_subscriber.dir/all] Error 2\n'}
[51.944689] (arduinobot_cpp_examples) StderrLine: {'line': b'gmake[1]: *** Waiting for unfinished jobs....\n'}
[51.966801] (-) TimerEvent: {}
[52.086473] (-) TimerEvent: {}
[52.207569] (-) TimerEvent: {}
[52.355043] (-) TimerEvent: {}
[52.477391] (-) TimerEvent: {}
[52.610521] (-) TimerEvent: {}
[52.747014] (-) TimerEvent: {}
[52.877868] (-) TimerEvent: {}
[52.991105] (-) TimerEvent: {}
[53.149851] (-) TimerEvent: {}
[53.288055] (-) TimerEvent: {}
[53.420391] (-) TimerEvent: {}
[53.522132] (-) TimerEvent: {}
[53.632467] (-) TimerEvent: {}
[53.765813] (-) TimerEvent: {}
[53.885184] (-) TimerEvent: {}
[53.988070] (-) TimerEvent: {}
[54.193665] (-) TimerEvent: {}
[54.347494] (-) TimerEvent: {}
[54.459314] (-) TimerEvent: {}
[54.569104] (-) TimerEvent: {}
[54.709838] (-) TimerEvent: {}
[54.825104] (-) TimerEvent: {}
[55.075881] (-) TimerEvent: {}
[55.190254] (-) TimerEvent: {}
[55.349196] (-) TimerEvent: {}
[55.477247] (-) TimerEvent: {}
[55.744730] (arduinobot_cpp_examples) StdoutLine: {'line': b'[ 75%] \x1b[32m\x1b[1mLinking CXX executable simple_publisher\x1b[0m\n'}
[55.754644] (-) TimerEvent: {}
[55.858104] (-) TimerEvent: {}
[55.991388] (-) TimerEvent: {}
[56.109354] (-) TimerEvent: {}
[56.269327] (-) TimerEvent: {}
[56.470300] (-) TimerEvent: {}
[56.611040] (-) TimerEvent: {}
[56.749264] (-) TimerEvent: {}
[56.878211] (-) TimerEvent: {}
[57.010224] (-) TimerEvent: {}
[57.126483] (-) TimerEvent: {}
[57.424670] (-) TimerEvent: {}
[57.550610] (-) TimerEvent: {}
[57.696470] (-) TimerEvent: {}
[57.855929] (-) TimerEvent: {}
[57.963583] (-) TimerEvent: {}
[58.077710] (-) TimerEvent: {}
[58.291260] (-) TimerEvent: {}
[58.463259] (-) TimerEvent: {}
[58.572882] (-) TimerEvent: {}
[58.680031] (-) TimerEvent: {}
[58.786205] (-) TimerEvent: {}
[58.907540] (-) TimerEvent: {}
[59.127260] (-) TimerEvent: {}
[59.240702] (-) TimerEvent: {}
[59.415999] (-) TimerEvent: {}
[59.565828] (-) TimerEvent: {}
[59.699044] (-) TimerEvent: {}
[59.809534] (-) TimerEvent: {}
[59.917455] (-) TimerEvent: {}
[60.038371] (-) TimerEvent: {}
[60.244699] (-) TimerEvent: {}
[60.411252] (-) TimerEvent: {}
[60.512215] (-) TimerEvent: {}
[60.622559] (-) TimerEvent: {}
[60.739804] (-) TimerEvent: {}
[60.892359] (-) TimerEvent: {}
[61.009047] (-) TimerEvent: {}
[61.110886] (-) TimerEvent: {}
[61.218746] (-) TimerEvent: {}
[61.347022] (-) TimerEvent: {}
[61.461888] (-) TimerEvent: {}
[61.633663] (-) TimerEvent: {}
[61.804541] (-) TimerEvent: {}
[61.927269] (-) TimerEvent: {}
[62.127601] (-) TimerEvent: {}
[62.250935] (-) TimerEvent: {}
[62.447071] (-) TimerEvent: {}
[62.577100] (-) TimerEvent: {}
[62.691820] (-) TimerEvent: {}
[62.830862] (-) TimerEvent: {}
[62.932626] (-) TimerEvent: {}
[63.040812] (-) TimerEvent: {}
[63.172674] (-) TimerEvent: {}
[63.308743] (-) TimerEvent: {}
[63.403873] (arduinobot_cpp_examples) StdoutLine: {'line': b'[ 75%] Built target simple_publisher\n'}
[63.408557] (arduinobot_cpp_examples) StderrLine: {'line': b'gmake: *** [Makefile:146: all] Error 2\n'}
[63.408952] (-) TimerEvent: {}
[63.506573] (arduinobot_cpp_examples) CommandEnded: {'returncode': 2}
[63.509371] (-) TimerEvent: {}
[63.618511] (-) TimerEvent: {}
[63.720858] (-) TimerEvent: {}
[63.917228] (-) TimerEvent: {}
[63.935977] (arduinobot_cpp_examples) JobEnded: {'identifier': 'arduinobot_cpp_examples', 'rc': 2}
[63.954368] (-) EventReactorShutdown: {}
